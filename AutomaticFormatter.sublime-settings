{
    // Place your settings in the file "Packages/User/AutomaticFormatter.sublime-settings", which overrides the settings in here.

    // Auto format on file save
    "autoformat_on_save": false,

    // The mapping key is `syntax name`, and the value is `formatting mode`.
    // Note that the value for each mapping should be "c", "java" or "cs".
    "user_defined_syntax_mode_mapping": {
        // "OPENCL": "C",
    },

    // Please refer to http://astyle.sourceforge.net/astyle.html for more information.

    //
    // == Option Files ==
    //

    // The default option file can be used for all projects. The file is identified by a file path and a file name. One of the command line options must be used to indicate a file is available, or it must be referred to by the environment variable. Artistic Style looks for a file path and file name in the following order.
    // - the file path indicated by the --options= command line option.
    // - the file path indicated by the environment variable ARTISTIC_STYLE_OPTIONS if it exists.
    // - the file named .astylerc in the directory pointed to by the HOME environment variable (e.g. "$HOME/.astylerc" on Linux);
    // - the file named astylerc in the directory pointed to by the APPDATA environment variable (e.g. "%APPDATA%\astylerc" on Windows).
    // - the file or environment variable can be disabled by specifying --options=none on the command line.
    "default_option_file": null,

    // The project option file has precedence over the default option file but not the command line options. The project option file should be in the top directory of the project being formatted. The file is identified by a file name only. One of the command line project options must be used to indicate a file is available, or it must be referred to by the environment variable. Artistic Style looks for the file in the current directory or one of its parent directories in the following order.
    // - the file name indicated by the --project= command line option.
    // - the file named .astylerc or _ astylerc.
    // - the file name identified by the environment variable ARTISTIC_STYLE_PROJECT_OPTIONS if it exists.
    // - the file or environment variable can be disabled by specifying --project=none on the command line.
    "project_option_file": null,


    // The command line options have precedence. If there is a conflict between a command line option and an option in a default or project file, the command line option will be used.

    //
    // == Options ==
    //

    //
    // === Brace Style Options ===
    //

    // Allman style: "allman", "bsd", "break"
    // Java style: "java", "attach"
    // Kernighan & Ritchie style: "kr", "k&r", "k/r"
    // Stroustrup style: "stroustrup"
    // Whitesmith style: "whitesmith"
    // VTK (Visualization Toolkit) style: "vtk"
    // Ratliff style: "ratliff ", "banner"
    // GNU style: "gnu"
    // Linux style: "linux", "knf"
    // Horstmann style: "horstmann", "run-in"
    // One True Brace style: "1tbs", "otbs"
    // Google style: "google"
    // Mozilla style: "mozilla"
    // Pico style: "pico"
    // Lisp style: "lisp", "python"
    "style": null,

    //
    // === Tab options ===
    //

    // If no indentation option is set, the default option of 4 spaces will be used (e.g. -s4 --indent=spaces=4).
    // - spaces / spaces=#: Indent using # spaces per indent (e.g. -s3 --indent=spaces=3). # must be between 2 and 20. Not specifying # will result in a default of 4 spaces per indent.
    // - tab / tab=#: Indent using tabs for indentation, and spaces for continuation line alignment. This ensures that the code is displayed correctly  regardless of the viewerâ€™s tab size. Treat each indent as # spaces (e.g. -t6 / --indent=tab=6). # must be between 2 and 20. If no # is set, treats indents as 4 spaces.
    // - force-tab / force-tab=#: Indent using all tab characters, if possible. If a continuation line is not an even number of tabs, spaces will be added at the end. Treat each tab as # spaces (e.g. -T6 / --indent=force-tab=6). # must be between 2 and 20. If no # is set, treats tabs as 4 spaces.
    // - force-tab-x / force-tab-x=#: This force-tab option allows the tab length to be set to a length that is different than the indent length. This may cause the indentation to be a mix of both tabs and spaces. Tabs will be used to indent, if possible. If a tab indent cannot be used, spaces will be used instead. This option sets the tab length. Treat each tab as # spaces (e.g. -xT6 / --indent=force-tab-x=6. # must be between 2 and 20. If no # is set, treats tabs as 8 spaces. To change the indent length from the default of 4 spaces the option "indent=force-tab" must also be used.
    "indent": "spaces=4",

    //
    // === Brace Modify Options ===
    //

    // Attach braces to a namespace statement. This is done regardless of the brace style being used.
    "attach-namespaces": false,

    // Attach braces to a class statement. This is done regardless of the brace style being used.
    "attach-classes": false,

    // Attach braces to class and struct inline function definitions. This option has precedence for all styles except Horstmann and Pico (run-in styles). It is effective for C++ files only.
    "attach-inlines": false,

    // Attach braces to a braced extern "C" statement. This is done regardless of the brace style being used. This option is effective for C++ files only.
    // An extern "C" statement that is part of a function definition is formatted according to the requested brace style. Braced extern "C" statements are unaffected by the brace style and this option is the only way to change them.
    "attach-extern-c": false,

    // Attach the closing 'while' of a 'do-while' statement to the closing brace. This has precedence over both the brace style and the break closing braces option.
    "attach-closing-while": false,

    //
    // === Indentation Options ===
    //

    // Indent 'class' and 'struct' blocks so that the entire block is indented. The struct blocks are indented only if an access modifier, 'public:', 'protected:' or 'private:', is declared somewhere in the struct. This option is effective for C++ files only.
    "indent-classes": false,

    // Indent 'class ' and 'struct' access modifiers, 'public:', 'protected:' and 'private:', one half indent. The rest of the class is not indented. This option is effective for C++ files only. If used with indent-classes this option will be ignored.
    "indent-modifiers": false,

    // Indent 'switch' blocks so that the 'case X:' statements are indented in the switch block. The entire case block is indented.
    "indent-switches": false,

    // Indent 'case X:' blocks from the 'case X:' headers. Case statements not enclosed in blocks are NOT indented.
    "indent-cases": false,

    // Add extra indentation to namespace blocks. This option has no effect on Java files.
    "indent-namespaces": false,

    // Indent, instead of align, continuation lines following lines that contain an opening paren '(' or an assignment '='. This includes function definitions and declarations and return statements. The indentation can be modified by using the following indent-continuation option.
    "indent-after-parens": false,

    // Set the continuation indent for a line that ends with an opening paren '(' or an assignment '='. This includes function definitions and declarations. It will also modify the previous indent-after-paren option. The value for # indicates a number of indents. The valid values are the integer values from 0 thru 4. If this option is not used, the default value of 1 is used.
    "indent-continuation": null,

    // Add extra indentation to labels so they appear 1 indent less than the current indentation, rather than being flushed to the left (the default).
    "indent-labels": false,

    // Indent preprocessor blocks at brace level zero and immediately within a namespace. There are restrictions on what will be indented. Blocks within methods, classes, arrays, etc., will not be indented. Blocks containing braces or multi-line define statements will not be indented. Without this option the preprocessor block is not indented.
    "indent-preproc-block": false,

    // Indent multi-line preprocessor definitions ending with a backslash. Should be used with --convert-tabs for proper results. Does a pretty good job, but cannot perform miracles in obfuscated preprocessor definitions. Without this option the preprocessor statements remain unchanged.
    "indent-preproc-define": false,

    // Indent preprocessor conditional statements to the same level as the source code.
    "indent-preproc-cond": false,

    // Indent C++ comments beginning in column one. By default C++ comments beginning in column one are assumed to be commented-out code and not indented. This option will allow the comments to be indented with the code.
    "indent-col1-comments": false,

    // Set the minimal indent that is added when a header is built of multiple lines. This indent helps to easily separate the header from the command statements that follow. The value for # indicates a number of indents and is a minimum value. The indent may be greater to align with the data on the previous line.
    // The valid values are:
    //      0 - no minimal indent. The lines will be aligned with the paren on the preceding line.
    //      1 - indent at least one additional indent.
    //      2 - indent at least two additional indents.
    //      3 - indent at least one-half an additional indent. This is intended for large indents (e.g. 8).
    // The default value is 2, two additional indents.
    "min-conditional-indent": null,

    // Set the  maximum of # spaces to indent a continuation line. The # indicates a number of columns and must not be less than 40 or greater than 120. If no value is set, the default value of 40 will be used. This option will prevent continuation lines from extending too far to the right. Setting a larger value will allow the code to be extended further to the right.
    "max-continuation-indent": null,

    //
    // === Padding Options ===
    //

    // "default" - Pad empty lines around header blocks (e.g. 'if', 'for', 'while'...).
    // "all"     - Pad empty lines around header blocks (e.g. 'if', 'for', 'while'...). Treat closing header blocks (e.g. 'else', 'catch') as stand-alone blocks.
    "break-blocks": null,

    // Insert space padding around operators. This will also pad commas. Any end of line comments will remain in the original column, if possible. Note that there is no option to unpad. Once padded, they stay padded.
    "pad-oper": false,

    // Insert space padding after commas. This is not needed if pad-oper is used. Any end of line comments will remain in the original column, if possible. Note that there is no option to unpad. Once padded, they stay padded.
    "pad-comma": false,

    // Insert space padding around parens on both the outside and the inside. Any end of line comments will remain in the original column, if possible.
    "pad-paren": false,

    // Insert space padding around parens on the outside only. Parens that are empty will not be padded. Any end of line comments will remain in the original column, if possible. This can be used with unpad-paren below to remove unwanted spaces.
    "pad-paren-out": false,

    // Insert space padding around the first paren in a series on the outside only. Parens that are empty will not be padded. Any end of line comments will remain in the original column, if possible. This can be used with unpad-paren below to remove unwanted spaces. If used with pad-paren or pad-paren-out, this option will be ignored. If used with pad-paren-in, the result will be the pad-paren.
    "pad-first-paren-out": false,

    // Insert space padding around paren on the inside only. Any end of line comments will remain in the original column, if possible. This can be used with unpad-paren below to remove unwanted spaces.
    "pad-paren-in": false,

    // Insert space padding between a header (e.g. 'if', 'for', 'while'...) and the following paren. Any end of line comments will remain in the original column, if possible. This can be used with unpad-paren to remove unwanted spaces.
    "pad-header": false,

    // Remove extra space padding around parens on the inside and outside. Any end of line comments will remain in the original column, if possible. This option can be used in combination with the paren padding options pad-paren, pad-paren-out, pad-paren-in, and pad-header above. Only padding that has not been requested by other options will be removed.
    "unpad-paren": false,

    // Delete empty lines within a function or method. Empty lines outside of functions or methods are NOT deleted. If used with break-blocks or break-blocks=all it will delete all lines EXCEPT the lines added by the break-blocks options.
    "delete-empty-lines": false,

    // Fill empty lines with the white space of the previous line.
    "fill-empty-lines": false,

    // Attach a pointer or reference operator (*, &, or ^) to either the variable type (left) or variable name (right), or place it between the type and name (middle). The spacing between the type and name will be preserved, if possible. This option is for C/C++, C++/CLI, and C# files. To format references separately, use the following align-reference option.
    "align-pointer": "name",

    // This option will align references separate from pointers. Pointers are not changed by this option. If pointers and references are to be aligned the same, use the previous align-pointer option. The option align-reference=none will not change the reference alignment. The other options are the same as for align-pointer. This option is for C/C++, C++/CLI, and C# files.
    "align-reference": "type",


    //
    // === Formatting Options ===
    //

    // When used with --style=java, --style=kr, --style=stroustrup, --style=linux, or --style=1tbs, this breaks closing headers (e.g. 'else', 'catch', ...) from their immediately preceding closing braces. Closing header braces are always broken with the other styles.
    "break-closing-braces": false,

    // Break "else if" header combinations into separate lines. This option has no effect if keep-one-line-statements is used, the "else if" statements will remain as they are. If this option is NOT used, "else if" header combinations will be placed on a single line.
    "break-elseifs": false,

    // Break one line headers (e.g. 'if', 'while', 'else', ...) from a statement residing on the same line. If the statement is enclosed in braces, the braces will be formatted according to the requested brace style. A multi-statement line will NOT be broken if keep-one-line-statements is requested. One line blocks will NOT be broken if keep-one-line-blocks is requested and the header is enclosed in the block.
    "break-one-line-headers": false,

    // Add braces to unbraced one line conditional statements (e.g. 'if', 'for', 'while'...). The statement must be on a single line. The braces will be added according to the requested brace style. If no style is requested the braces will be attached. Braces will NOT be added to a multi-statement line if keep-one-line-statements is requested. Braces will NOT be added to a one line block if keep-one-line-blocks is requested. If used with --add-one-line-braces, the result will be one line braces.
    "add-braces": false,

    // Add one line braces to unbraced one line conditional statements (e.g. 'if', 'for', 'while'...). The statement must be on a single line. The option implies --keep-one-line-blocks and will not break the one line blocks.
    "add-one-line-braces": false,

    // Remove braces from conditional statements (e.g. 'if', 'for', 'while'...). The statement must be a single statement on a single line. If --add-braces or --add-one-line-braces is also used the result will be to add braces. Braces will not be removed from "One True Brace Style", --style=1tbs.
    "remove-braces": false,

    // Break the return type from the function name. The two options are for the function definitions (-xB), and the function declarations or signatures (-xD). If used with --attach-return-type, the result will be to break the return type. This option has no effect on Objective-C functions.
    "break-return-type": false,
    "break-return-type-decl": false,

    // Attach the return type to the function name. The two options are for the function definitions (-xf), and the function declarations or signatures (-xh). They are intended to undo the --break-return-type options. If used with --break-return-type, the result will be to break the return type. This option has no effect on Objective-C functions.
    "attach-return-type": false,
    "attach-return-type-decl": false,

    // Don't break one-line blocks.
    "keep-one-line-blocks": false,

    // Don't break complex statements and multiple statements residing on a single line.
    "keep-one-line-statements": false,

    // Converts tabs into spaces in the non-indentation part of the line. The number of spaces inserted will maintain the spacing of the tab. The current setting for spaces per tab is used. It may not produce the expected results if convert-tabs is used when changing spaces per tab. Tabs are not replaced within quotes.
    "convert-tabs": false,

    // Closes whitespace between the ending angle brackets of template definitions. Closing the ending angle brackets is now allowed by the C++11 standard. Be sure your compiler supports this before making the changes.
    "close-templates": false,

    // Remove the preceding '*' in a multi-line comment that begins a line. A trailing '*', if present, is also removed. Text that is less than one indent is indented to one indent. Text greater than one indent is not changed. Multi-line comments that begin a line, but without the preceding '*', are indented to one indent for consistency. This can slightly modify the indentation of commented out blocks of code. Lines containing all '*' are left unchanged. Extra spacing is removed from the comment close '*/'.
    "remove-comment-prefix": false,

    // The option max-code-length will break a line if the code exceeds # characters. The valid values are 50 thru 200. Lines without logical conditionals will break on a logical conditional (||, &&, ...), comma, paren, semicolon, or space.
    // Some code will not be broken, such as comments, quotes, and arrays. If used with keep-one-line-blocks or add-one-line-braces the blocks will NOT be broken. If used with keep-one-line-statements the statements will be broken at a semicolon if the line goes over the maximum length. If there is no available break point within the max code length, the line will be broken at the first available break point after the max code length.
    // By default logical conditionals will be placed first in the new line. The option break-after-logical will cause the logical conditionals to be placed last on the previous line. This option has no effect without max-code-length.
    "max-code-length": null,
    "break-after-logical": false,

    //
    // === Objective-C Options ===
    //

    // Insert space padding after the '-' or '+' Objective-C method prefix. This will add exactly one space. Any additional spaces will be deleted.
    "pad-method-prefix": false,

    // Remove all space padding after the '-' or '+' Objective-C method prefix.  This option will be ignored if used with pad-method-prefix. This option takes precedence over the pad paren outside option.
    "unpad-method-prefix": false,

    // Insert space padding after the Objective-C return type. This will add exactly one space. Any additional spaces will be deleted.
    "pad-return-type": false,

    // Remove all space padding after the Objective-C return type. This option will be ignored if used with pad-return-type. This option takes precedence over the pad paren outside option.
    "unpad-return-type": false,

    // Insert space padding around an Objective-C parameter type. This will add exactly one space. Any additional spaces will be deleted. This has precedence over the pad method colon option and will always cause space padding after a method colon.
    "pad-param-type": false,

    // Remove all space padding around an Objective-C parameter type. This option takes precedence over the pad paren outside option. The pad method colon option has precedence over the opening paren. The closing paren will always be unpadded.
    "unpad-param-type": false,

    // Align the colons in Objective-C method declarations and method calls. If this option is not declared, method definitions will be indented uniformly, and method calls will align with the first keyword.
    "align-method-colon": false,

    // Add or remove space padding before or after the colons in an Objective-C method call. These options will pad exactly one space. Any additional spaces will be deleted. The space padding after the method colon can be overridden by pad-param-type.
    // Can be one of "none", "all", "after" or "before", or "default" for default.
    "pad-method-colon": null,
    // Because of the longer indents sometimes needed for Objective-C, the option
    // "max-instatement-indent" may need to be increased. If you are not getting
    // the paren and square bracket alignment you want, try increasing this value.

    // Align the colons in Objective-C method declarations. This option is effective
    // for Objective-C files only.
    "align-method-colon": false,

    // Add or remove space padding before or after the colons in an Objective-C
    // method call. These options will pad exactly one space. Any additional
    // spaces will be deleted. Colons immediarely preceeding a paren will not
    // be padded. This option is effective for Objective-C files only.
    //
    // Can be one of "none", "all", "after" or "before", or null for default.
    "pad-method-colon": null
}
